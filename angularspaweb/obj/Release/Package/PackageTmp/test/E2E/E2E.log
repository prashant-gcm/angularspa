
D:\Prashant\net4\ASP.net4\angular\angularspa\angularspaweb>webdriver-manager start
seleniumProcess.pid: 14068
06:50:49.093 INFO - Launching a standalone server
Setting system property webdriver.chrome.driver to C:\Program Files\nodejs\node_modules\protractor\selenium\chromedriver.exe
06:50:49.181 INFO - Java: Oracle Corporation 25.31-b07
06:50:49.181 INFO - OS: Windows 8.1 6.3 amd64
06:50:49.190 INFO - v2.44.0, with Core v2.44.0. Built from revision 76d78cf
06:50:49.302 INFO - RemoteWebDriver instances should connect to: http://127.0.0.1:4444/wd/hub
06:50:49.303 INFO - Version Jetty/5.1.x
06:50:49.305 INFO - Started HttpContext[/selenium-server,/selenium-server]
06:50:49.363 INFO - Started org.openqa.jetty.jetty.servlet.ServletHandler@6e3c1e69
06:50:49.363 INFO - Started HttpContext[/wd,/wd]
06:50:49.363 INFO - Started HttpContext[/selenium-server/driver,/selenium-server/driver]
06:50:49.364 INFO - Started HttpContext[/,/]
06:50:49.367 INFO - Started SocketListener on 0.0.0.0:4444
06:50:49.367 INFO - Started org.openqa.jetty.jetty.Server@b1bc7ed
06:50:56.591 INFO - Executing: [new session: Capabilities [{count=1, browserName=chrome}]])
06:50:56.602 INFO - Creating a new session for Capabilities [{count=1, browserName=chrome}]
Starting ChromeDriver 2.13.307647 (5a7d0541ebc58e69994a6fb2ed930f45261f3c29) on port 17059
Only local connections are allowed.
06:50:58.480 INFO - Done: [new session: Capabilities [{count=1, browserName=chrome}]]
06:50:58.540 INFO - Executing: [set script timeoutt: 11000])
06:50:58.546 INFO - Done: [set script timeoutt: 11000]
06:50:58.592 INFO - Executing: [get: data:text/html,<html></html>])
06:50:58.776 INFO - Done: [get: data:text/html,<html></html>]
06:50:58.792 INFO - Executing: [execute script: window.name = "NG_DEFER_BOOTSTRAP!" + window.name;window.location.replace("http://pacific/angularspa/e
xruleseditor/");, []])
06:50:59.681 INFO - Done: [execute script: window.name = "NG_DEFER_BOOTSTRAP!" + window.name;window.location.replace("http://pacific/angularspa/exrule
seditor/");, []]
06:50:59.723 INFO - Executing: [execute script: return window.location.href;, []])
06:50:59.735 INFO - Done: [execute script: return window.location.href;, []]
06:50:59.776 INFO - Executing: [execute async script: try { return (function (attempts, asyncCallback) {
  var callback = function(args) {
    setTimeout(function() {
      asyncCallback(args);
    }, 0);
  };
  var check = function(n) {
    try {
      if (window.angular && window.angular.resumeBootstrap) {
        callback([true, null]);
      } else if (n < 1) {
        if (window.angular) {
          callback([false, 'angular never provided resumeBootstrap']);
        } else {
          callback([false, 'retries looking for angular exceeded']);
        }
      } else {
        window.setTimeout(function() {check(n - 1);}, 1000);
      }
    } catch (e) {
      callback([false, e]);
    }
  };
  check(attempts);
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [10]])
06:50:59.897 INFO - Done: [execute async script: try { return (function (attempts, asyncCallback) {
  var callback = function(args) {
    setTimeout(function() {
      asyncCallback(args);
    }, 0);
  };
  var check = function(n) {
    try {
      if (window.angular && window.angular.resumeBootstrap) {
        callback([true, null]);
      } else if (n < 1) {
        if (window.angular) {
          callback([false, 'angular never provided resumeBootstrap']);
        } else {
          callback([false, 'retries looking for angular exceeded']);
        }
      } else {
        window.setTimeout(function() {check(n - 1);}, 1000);
      }
    } catch (e) {
      callback([false, e]);
    }
  };
  check(attempts);
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [10]]
06:50:59.925 INFO - Executing: [execute script: return (function () {
    angular.module('protractorBaseModule_', []).
        config(['$compileProvider', function($compileProvider) {
          if ($compileProvider.debugInfoEnabled) {
            $compileProvider.debugInfoEnabled(true);
          }
        }]);
  }).apply(null, arguments);, []])
06:50:59.935 INFO - Done: [execute script: return (function () {
    angular.module('protractorBaseModule_', []).
        config(['$compileProvider', function($compileProvider) {
          if ($compileProvider.debugInfoEnabled) {
            $compileProvider.debugInfoEnabled(true);
          }
        }]);
  }).apply(null, arguments);, []]
06:50:59.952 INFO - Executing: [execute script: angular.resumeBootstrap(arguments[0]);, [[protractorBaseModule_]]])
06:51:00.038 INFO - Done: [execute script: angular.resumeBootstrap(arguments[0]);, [[protractorBaseModule_]]]
06:51:05.152 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:05.182 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:05.204 INFO - Executing: [find elements: By.selector: .exruleeditor_grid])
06:51:05.259 INFO - Done: [find elements: By.selector: .exruleeditor_grid]
06:51:05.324 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:05.339 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:05.359 INFO - Executing: [find elements: By.selector: .exruleeditor_form])
06:51:05.389 INFO - Done: [find elements: By.selector: .exruleeditor_form]
06:51:05.534 INFO - Executing: [get: data:text/html,<html></html>])
06:51:05.572 INFO - Done: [get: data:text/html,<html></html>]
06:51:05.588 INFO - Executing: [execute script: window.name = "NG_DEFER_BOOTSTRAP!" + window.name;window.location.replace("http://pacific/angularspa/e
xruleseditor/");, []])
06:51:05.674 INFO - Done: [execute script: window.name = "NG_DEFER_BOOTSTRAP!" + window.name;window.location.replace("http://pacific/angularspa/exrule
seditor/");, []]
06:51:05.702 INFO - Executing: [execute script: return window.location.href;, []])
06:51:05.711 INFO - Done: [execute script: return window.location.href;, []]
06:51:05.775 INFO - Executing: [execute async script: try { return (function (attempts, asyncCallback) {
  var callback = function(args) {
    setTimeout(function() {
      asyncCallback(args);
    }, 0);
  };
  var check = function(n) {
    try {
      if (window.angular && window.angular.resumeBootstrap) {
        callback([true, null]);
      } else if (n < 1) {
        if (window.angular) {
          callback([false, 'angular never provided resumeBootstrap']);
        } else {
          callback([false, 'retries looking for angular exceeded']);
        }
      } else {
        window.setTimeout(function() {check(n - 1);}, 1000);
      }
    } catch (e) {
      callback([false, e]);
    }
  };
  check(attempts);
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [10]])
06:51:05.889 INFO - Done: [execute async script: try { return (function (attempts, asyncCallback) {
  var callback = function(args) {
    setTimeout(function() {
      asyncCallback(args);
    }, 0);
  };
  var check = function(n) {
    try {
      if (window.angular && window.angular.resumeBootstrap) {
        callback([true, null]);
      } else if (n < 1) {
        if (window.angular) {
          callback([false, 'angular never provided resumeBootstrap']);
        } else {
          callback([false, 'retries looking for angular exceeded']);
        }
      } else {
        window.setTimeout(function() {check(n - 1);}, 1000);
      }
    } catch (e) {
      callback([false, e]);
    }
  };
  check(attempts);
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [10]]
06:51:05.904 INFO - Executing: [execute script: return (function () {
    angular.module('protractorBaseModule_', []).
        config(['$compileProvider', function($compileProvider) {
          if ($compileProvider.debugInfoEnabled) {
            $compileProvider.debugInfoEnabled(true);
          }
        }]);
  }).apply(null, arguments);, []])
06:51:05.910 INFO - Done: [execute script: return (function () {
    angular.module('protractorBaseModule_', []).
        config(['$compileProvider', function($compileProvider) {
          if ($compileProvider.debugInfoEnabled) {
            $compileProvider.debugInfoEnabled(true);
          }
        }]);
  }).apply(null, arguments);, []]
06:51:05.939 INFO - Executing: [execute script: angular.resumeBootstrap(arguments[0]);, [[protractorBaseModule_]]])
06:51:05.977 INFO - Done: [execute script: angular.resumeBootstrap(arguments[0]);, [[protractorBaseModule_]]]
06:51:11.097 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:11.112 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:11.125 INFO - Executing: [find elements: By.selector: .RuleTable tr td a])
06:51:11.159 INFO - Done: [find elements: By.selector: .RuleTable tr td a]
06:51:11.224 INFO - Executing: [get text: 2 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
)
06:51:11.263 INFO - Done: [get text: 2 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:11.292 INFO - Executing: [get text: 3 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
)
06:51:11.327 INFO - Done: [get text: 3 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:11.355 INFO - Executing: [get text: 4 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
)
06:51:11.390 INFO - Done: [get text: 4 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:11.420 INFO - Executing: [get text: 5 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
)
06:51:11.455 INFO - Done: [get text: 5 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:11.481 INFO - Executing: [get text: 6 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
)
06:51:11.516 INFO - Done: [get text: 6 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:11.541 INFO - Executing: [get text: 7 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
)
06:51:11.576 INFO - Done: [get text: 7 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:11.604 INFO - Executing: [get text: 8 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
)
06:51:11.640 INFO - Done: [get text: 8 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:11.667 INFO - Executing: [get text: 9 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
)
06:51:11.703 INFO - Done: [get text: 9 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:11.730 INFO - Executing: [get text: 10 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:11.764 INFO - Done: [get text: 10 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:11.791 INFO - Executing: [get text: 11 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:11.825 INFO - Done: [get text: 11 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:11.855 INFO - Executing: [get text: 12 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:11.890 INFO - Done: [get text: 12 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:12.065 INFO - Executing: [get: data:text/html,<html></html>])
06:51:12.112 INFO - Done: [get: data:text/html,<html></html>]
06:51:12.128 INFO - Executing: [execute script: window.name = "NG_DEFER_BOOTSTRAP!" + window.name;window.location.replace("http://pacific/angularspa/e
xruleseditor/");, []])
06:51:12.183 INFO - Done: [execute script: window.name = "NG_DEFER_BOOTSTRAP!" + window.name;window.location.replace("http://pacific/angularspa/exrule
seditor/");, []]
06:51:12.218 INFO - Executing: [execute script: return window.location.href;, []])
06:51:12.228 INFO - Done: [execute script: return window.location.href;, []]
06:51:12.278 INFO - Executing: [execute async script: try { return (function (attempts, asyncCallback) {
  var callback = function(args) {
    setTimeout(function() {
      asyncCallback(args);
    }, 0);
  };
  var check = function(n) {
    try {
      if (window.angular && window.angular.resumeBootstrap) {
        callback([true, null]);
      } else if (n < 1) {
        if (window.angular) {
          callback([false, 'angular never provided resumeBootstrap']);
        } else {
          callback([false, 'retries looking for angular exceeded']);
        }
      } else {
        window.setTimeout(function() {check(n - 1);}, 1000);
      }
    } catch (e) {
      callback([false, e]);
    }
  };
  check(attempts);
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [10]])
06:51:12.395 INFO - Done: [execute async script: try { return (function (attempts, asyncCallback) {
  var callback = function(args) {
    setTimeout(function() {
      asyncCallback(args);
    }, 0);
  };
  var check = function(n) {
    try {
      if (window.angular && window.angular.resumeBootstrap) {
        callback([true, null]);
      } else if (n < 1) {
        if (window.angular) {
          callback([false, 'angular never provided resumeBootstrap']);
        } else {
          callback([false, 'retries looking for angular exceeded']);
        }
      } else {
        window.setTimeout(function() {check(n - 1);}, 1000);
      }
    } catch (e) {
      callback([false, e]);
    }
  };
  check(attempts);
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [10]]
06:51:12.404 INFO - Executing: [execute script: return (function () {
    angular.module('protractorBaseModule_', []).
        config(['$compileProvider', function($compileProvider) {
          if ($compileProvider.debugInfoEnabled) {
            $compileProvider.debugInfoEnabled(true);
          }
        }]);
  }).apply(null, arguments);, []])
06:51:12.412 INFO - Done: [execute script: return (function () {
    angular.module('protractorBaseModule_', []).
        config(['$compileProvider', function($compileProvider) {
          if ($compileProvider.debugInfoEnabled) {
            $compileProvider.debugInfoEnabled(true);
          }
        }]);
  }).apply(null, arguments);, []]
06:51:12.436 INFO - Executing: [execute script: angular.resumeBootstrap(arguments[0]);, [[protractorBaseModule_]]])
06:51:12.473 INFO - Done: [execute script: angular.resumeBootstrap(arguments[0]);, [[protractorBaseModule_]]]
06:51:17.575 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:17.589 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:17.608 INFO - Executing: [find elements: By.selector: .RuleTable tr td a])
06:51:17.642 INFO - Done: [find elements: By.selector: .RuleTable tr td a]
06:51:17.690 INFO - Executing: [get text: 13 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:17.726 INFO - Done: [get text: 13 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:17.762 INFO - Executing: [get text: 14 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:17.797 INFO - Done: [get text: 14 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:17.823 INFO - Executing: [get text: 15 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:17.857 INFO - Done: [get text: 15 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:17.886 INFO - Executing: [get text: 16 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:17.921 INFO - Done: [get text: 16 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:17.949 INFO - Executing: [get text: 17 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:17.984 INFO - Done: [get text: 17 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:18.026 INFO - Executing: [get text: 18 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:18.061 INFO - Done: [get text: 18 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:18.088 INFO - Executing: [get text: 19 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:18.123 INFO - Done: [get text: 19 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:18.151 INFO - Executing: [get text: 20 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:18.186 INFO - Done: [get text: 20 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:18.230 INFO - Executing: [get text: 21 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:18.264 INFO - Done: [get text: 21 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:18.291 INFO - Executing: [get text: 22 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:18.325 INFO - Done: [get text: 22 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:18.353 INFO - Executing: [get text: 23 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:18.387 INFO - Done: [get text: 23 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:18.481 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:18.493 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:18.512 INFO - Executing: [find elements: By.id: btnCreateNewRule])
06:51:18.541 INFO - Done: [find elements: By.id: btnCreateNewRule]
06:51:18.575 INFO - Executing: [click: 24 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: btnCreateNewRule]])
06:51:18.643 INFO - Done: [click: 24 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: btnCreateNewRule]]
06:51:18.729 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:18.741 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:18.787 INFO - Executing: [execute script: try { return (function (binding, exactMatch, using, rootSelector) {
  var root = document.querySelector(rootSelector || 'body');
  using = using || document;
  if (angular.getTestability) {
    return angular.getTestability(root).
        findBindings(using, binding, exactMatch);
  }
  var bindings = using.getElementsByClassName('ng-binding');
  var matches = [];
  for (var i = 0; i < bindings.length; ++i) {
    var dataBinding = angular.element(bindings[i]).data('$binding');
    if(dataBinding) {
      var bindingName = dataBinding.exp || dataBinding[0].exp || dataBinding;
      if (exactMatch) {
        var matcher = new RegExp('({|\\s|^|\\|)' + binding + '(}|\\s|$|\\|)');
        if (matcher.test(bindingName)) {
          matches.push(bindings[i]);
        }
      } else {
        if (bindingName.indexOf(binding) != -1) {
          matches.push(bindings[i]);
        }
      }

    }
  }
  return matches; /* Return the whole array for webdriver.findElements. */
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [CurrentRule.RuleId, false, null, #exRulesEditorApp]])
06:51:18.799 INFO - Done: [execute script: try { return (function (binding, exactMatch, using, rootSelector) {
  var root = document.querySelector(rootSelector || 'body');
  using = using || document;
  if (angular.getTestability) {
    return angular.getTestability(root).
        findBindings(using, binding, exactMatch);
  }
  var bindings = using.getElementsByClassName('ng-binding');
  var matches = [];
  for (var i = 0; i < bindings.length; ++i) {
    var dataBinding = angular.element(bindings[i]).data('$binding');
    if(dataBinding) {
      var bindingName = dataBinding.exp || dataBinding[0].exp || dataBinding;
      if (exactMatch) {
        var matcher = new RegExp('({|\\s|^|\\|)' + binding + '(}|\\s|$|\\|)');
        if (matcher.test(bindingName)) {
          matches.push(bindings[i]);
        }
      } else {
        if (bindingName.indexOf(binding) != -1) {
          matches.push(bindings[i]);
        }
      }

    }
  }
  return matches; /* Return the whole array for webdriver.findElements. */
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [CurrentRule.RuleId, false, null, #exRulesEditorApp]]
06:51:18.876 INFO - Executing: [get text: 25 [org.openqa.selenium.remote.RemoteWebElement@a4644145 -> unknown locator]])
06:51:18.911 INFO - Done: [get text: 25 [org.openqa.selenium.remote.RemoteWebElement@a4644145 -> unknown locator]]
06:51:19.096 INFO - Executing: [get: data:text/html,<html></html>])
06:51:19.142 INFO - Done: [get: data:text/html,<html></html>]
06:51:19.157 INFO - Executing: [execute script: window.name = "NG_DEFER_BOOTSTRAP!" + window.name;window.location.replace("http://pacific/angularspa/e
xruleseditor/");, []])
06:51:19.212 INFO - Done: [execute script: window.name = "NG_DEFER_BOOTSTRAP!" + window.name;window.location.replace("http://pacific/angularspa/exrule
seditor/");, []]
06:51:19.252 INFO - Executing: [execute script: return window.location.href;, []])
06:51:19.261 INFO - Done: [execute script: return window.location.href;, []]
06:51:19.307 INFO - Executing: [execute async script: try { return (function (attempts, asyncCallback) {
  var callback = function(args) {
    setTimeout(function() {
      asyncCallback(args);
    }, 0);
  };
  var check = function(n) {
    try {
      if (window.angular && window.angular.resumeBootstrap) {
        callback([true, null]);
      } else if (n < 1) {
        if (window.angular) {
          callback([false, 'angular never provided resumeBootstrap']);
        } else {
          callback([false, 'retries looking for angular exceeded']);
        }
      } else {
        window.setTimeout(function() {check(n - 1);}, 1000);
      }
    } catch (e) {
      callback([false, e]);
    }
  };
  check(attempts);
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [10]])
06:51:19.320 INFO - Done: [execute async script: try { return (function (attempts, asyncCallback) {
  var callback = function(args) {
    setTimeout(function() {
      asyncCallback(args);
    }, 0);
  };
  var check = function(n) {
    try {
      if (window.angular && window.angular.resumeBootstrap) {
        callback([true, null]);
      } else if (n < 1) {
        if (window.angular) {
          callback([false, 'angular never provided resumeBootstrap']);
        } else {
          callback([false, 'retries looking for angular exceeded']);
        }
      } else {
        window.setTimeout(function() {check(n - 1);}, 1000);
      }
    } catch (e) {
      callback([false, e]);
    }
  };
  check(attempts);
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [10]]
06:51:19.344 INFO - Executing: [execute script: return (function () {
    angular.module('protractorBaseModule_', []).
        config(['$compileProvider', function($compileProvider) {
          if ($compileProvider.debugInfoEnabled) {
            $compileProvider.debugInfoEnabled(true);
          }
        }]);
  }).apply(null, arguments);, []])
06:51:19.352 INFO - Done: [execute script: return (function () {
    angular.module('protractorBaseModule_', []).
        config(['$compileProvider', function($compileProvider) {
          if ($compileProvider.debugInfoEnabled) {
            $compileProvider.debugInfoEnabled(true);
          }
        }]);
  }).apply(null, arguments);, []]
06:51:19.373 INFO - Executing: [execute script: angular.resumeBootstrap(arguments[0]);, [[protractorBaseModule_]]])
06:51:19.406 INFO - Done: [execute script: angular.resumeBootstrap(arguments[0]);, [[protractorBaseModule_]]]
06:51:24.512 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:24.526 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:24.544 INFO - Executing: [find elements: By.selector: .RuleTable tr td a])
06:51:24.564 INFO - Done: [find elements: By.selector: .RuleTable tr td a]
06:51:24.615 INFO - Executing: [get text: 26 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:24.651 INFO - Done: [get text: 26 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:24.681 INFO - Executing: [get text: 27 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:24.715 INFO - Done: [get text: 27 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:24.744 INFO - Executing: [get text: 28 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:24.778 INFO - Done: [get text: 28 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:24.806 INFO - Executing: [get text: 29 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:24.840 INFO - Done: [get text: 29 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:24.869 INFO - Executing: [get text: 30 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:24.903 INFO - Done: [get text: 30 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:24.931 INFO - Executing: [get text: 31 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:24.965 INFO - Done: [get text: 31 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:24.994 INFO - Executing: [get text: 32 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:25.028 INFO - Done: [get text: 32 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:25.056 INFO - Executing: [get text: 33 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:25.090 INFO - Done: [get text: 33 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:25.120 INFO - Executing: [get text: 34 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:25.154 INFO - Done: [get text: 34 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:25.181 INFO - Executing: [get text: 35 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:25.215 INFO - Done: [get text: 35 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:25.245 INFO - Executing: [get text: 36 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:25.278 INFO - Done: [get text: 36 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:25.371 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:25.383 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:25.425 INFO - Executing: [execute script: try { return (function (model, using, rootSelector) {
  var root = document.querySelector(rootSelector || 'body');
  using = using || document;

  if (angular.getTestability) {
    return angular.getTestability(root).
        findModels(using, model, true);
  }
  var prefixes = ['ng-', 'ng_', 'data-ng-', 'x-ng-', 'ng\\:'];
  for (var p = 0; p < prefixes.length; ++p) {
    var selector = '[' + prefixes[p] + 'model="' + model + '"]';
    var elements = using.querySelectorAll(selector);
    if (elements.length) {
      return elements;
    }
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [CurrentRule.RuleName, null, #exRulesEditorApp]])
06:51:25.436 INFO - Done: [execute script: try { return (function (model, using, rootSelector) {
  var root = document.querySelector(rootSelector || 'body');
  using = using || document;

  if (angular.getTestability) {
    return angular.getTestability(root).
        findModels(using, model, true);
  }
  var prefixes = ['ng-', 'ng_', 'data-ng-', 'x-ng-', 'ng\\:'];
  for (var p = 0; p < prefixes.length; ++p) {
    var selector = '[' + prefixes[p] + 'model="' + model + '"]';
    var elements = using.querySelectorAll(selector);
    if (elements.length) {
      return elements;
    }
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [CurrentRule.RuleName, null, #exRulesEditorApp]]
06:51:25.526 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:25.538 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:25.580 INFO - Executing: [execute script: try { return (function (model, using, rootSelector) {
  var root = document.querySelector(rootSelector || 'body');
  using = using || document;

  if (angular.getTestability) {
    return angular.getTestability(root).
        findModels(using, model, true);
  }
  var prefixes = ['ng-', 'ng_', 'data-ng-', 'x-ng-', 'ng\\:'];
  for (var p = 0; p < prefixes.length; ++p) {
    var selector = '[' + prefixes[p] + 'model="' + model + '"]';
    var elements = using.querySelectorAll(selector);
    if (elements.length) {
      return elements;
    }
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [CurrentRule.RuleName, null, #exRulesEditorApp]])
06:51:25.591 INFO - Done: [execute script: try { return (function (model, using, rootSelector) {
  var root = document.querySelector(rootSelector || 'body');
  using = using || document;

  if (angular.getTestability) {
    return angular.getTestability(root).
        findModels(using, model, true);
  }
  var prefixes = ['ng-', 'ng_', 'data-ng-', 'x-ng-', 'ng\\:'];
  for (var p = 0; p < prefixes.length; ++p) {
    var selector = '[' + prefixes[p] + 'model="' + model + '"]';
    var elements = using.querySelectorAll(selector);
    if (elements.length) {
      return elements;
    }
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [CurrentRule.RuleName, null, #exRulesEditorApp]]
06:51:25.654 INFO - Executing: [clear: 37 [org.openqa.selenium.remote.RemoteWebElement@56a91ebe -> unknown locator]])
06:51:25.689 INFO - Done: [clear: 37 [org.openqa.selenium.remote.RemoteWebElement@56a91ebe -> unknown locator]]
06:51:25.778 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:25.790 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:25.834 INFO - Executing: [execute script: try { return (function (model, using, rootSelector) {
  var root = document.querySelector(rootSelector || 'body');
  using = using || document;

  if (angular.getTestability) {
    return angular.getTestability(root).
        findModels(using, model, true);
  }
  var prefixes = ['ng-', 'ng_', 'data-ng-', 'x-ng-', 'ng\\:'];
  for (var p = 0; p < prefixes.length; ++p) {
    var selector = '[' + prefixes[p] + 'model="' + model + '"]';
    var elements = using.querySelectorAll(selector);
    if (elements.length) {
      return elements;
    }
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [CurrentRule.RuleName, null, #exRulesEditorApp]])
06:51:25.843 INFO - Done: [execute script: try { return (function (model, using, rootSelector) {
  var root = document.querySelector(rootSelector || 'body');
  using = using || document;

  if (angular.getTestability) {
    return angular.getTestability(root).
        findModels(using, model, true);
  }
  var prefixes = ['ng-', 'ng_', 'data-ng-', 'x-ng-', 'ng\\:'];
  for (var p = 0; p < prefixes.length; ++p) {
    var selector = '[' + prefixes[p] + 'model="' + model + '"]';
    var elements = using.querySelectorAll(selector);
    if (elements.length) {
      return elements;
    }
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [CurrentRule.RuleName, null, #exRulesEditorApp]]
06:51:25.904 INFO - Executing: [send keys: 37 [org.openqa.selenium.remote.RemoteWebElement@56a91ebe -> unknown locator], [Rule 7 - modified]])
06:51:26.067 INFO - Done: [send keys: 37 [org.openqa.selenium.remote.RemoteWebElement@56a91ebe -> unknown locator], [Rule 7 - modified]]
06:51:26.152 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:26.159 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:26.175 INFO - Executing: [find elements: By.id: btnRuleSubmit])
06:51:26.204 INFO - Done: [find elements: By.id: btnRuleSubmit]
06:51:26.231 INFO - Executing: [click: 38 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: btnRuleSubmit]])
06:51:26.293 INFO - Done: [click: 38 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: btnRuleSubmit]]
06:51:26.372 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:26.383 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:26.401 INFO - Executing: [find elements: By.selector: .RuleTable tr td a])
06:51:26.416 INFO - Done: [find elements: By.selector: .RuleTable tr td a]
06:51:26.472 INFO - Executing: [get text: 26 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:26.505 INFO - Done: [get text: 26 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:26.543 INFO - Executing: [get text: 27 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:26.559 INFO - Done: [get text: 27 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:26.588 INFO - Executing: [get text: 28 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:26.620 INFO - Done: [get text: 28 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:26.665 INFO - Executing: [get text: 29 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:26.682 INFO - Done: [get text: 29 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:26.728 INFO - Executing: [get text: 30 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:26.762 INFO - Done: [get text: 30 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:26.790 INFO - Executing: [get text: 31 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:26.806 INFO - Done: [get text: 31 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:26.855 INFO - Executing: [get text: 32 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:26.887 INFO - Done: [get text: 32 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:26.916 INFO - Executing: [get text: 33 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:26.935 INFO - Done: [get text: 33 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:26.963 INFO - Executing: [get text: 34 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:26.995 INFO - Done: [get text: 34 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:27.025 INFO - Executing: [get text: 35 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:27.057 INFO - Done: [get text: 35 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:27.105 INFO - Executing: [get text: 36 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:27.121 INFO - Done: [get text: 36 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:27.301 INFO - Executing: [get: data:text/html,<html></html>])
06:51:27.327 INFO - Done: [get: data:text/html,<html></html>]
06:51:27.342 INFO - Executing: [execute script: window.name = "NG_DEFER_BOOTSTRAP!" + window.name;window.location.replace("http://pacific/angularspa/e
xruleseditor/");, []])
06:51:27.408 INFO - Done: [execute script: window.name = "NG_DEFER_BOOTSTRAP!" + window.name;window.location.replace("http://pacific/angularspa/exrule
seditor/");, []]
06:51:27.442 INFO - Executing: [execute script: return window.location.href;, []])
06:51:27.452 INFO - Done: [execute script: return window.location.href;, []]
06:51:27.494 INFO - Executing: [execute async script: try { return (function (attempts, asyncCallback) {
  var callback = function(args) {
    setTimeout(function() {
      asyncCallback(args);
    }, 0);
  };
  var check = function(n) {
    try {
      if (window.angular && window.angular.resumeBootstrap) {
        callback([true, null]);
      } else if (n < 1) {
        if (window.angular) {
          callback([false, 'angular never provided resumeBootstrap']);
        } else {
          callback([false, 'retries looking for angular exceeded']);
        }
      } else {
        window.setTimeout(function() {check(n - 1);}, 1000);
      }
    } catch (e) {
      callback([false, e]);
    }
  };
  check(attempts);
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [10]])
06:51:27.507 INFO - Done: [execute async script: try { return (function (attempts, asyncCallback) {
  var callback = function(args) {
    setTimeout(function() {
      asyncCallback(args);
    }, 0);
  };
  var check = function(n) {
    try {
      if (window.angular && window.angular.resumeBootstrap) {
        callback([true, null]);
      } else if (n < 1) {
        if (window.angular) {
          callback([false, 'angular never provided resumeBootstrap']);
        } else {
          callback([false, 'retries looking for angular exceeded']);
        }
      } else {
        window.setTimeout(function() {check(n - 1);}, 1000);
      }
    } catch (e) {
      callback([false, e]);
    }
  };
  check(attempts);
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [10]]
06:51:27.530 INFO - Executing: [execute script: return (function () {
    angular.module('protractorBaseModule_', []).
        config(['$compileProvider', function($compileProvider) {
          if ($compileProvider.debugInfoEnabled) {
            $compileProvider.debugInfoEnabled(true);
          }
        }]);
  }).apply(null, arguments);, []])
06:51:27.538 INFO - Done: [execute script: return (function () {
    angular.module('protractorBaseModule_', []).
        config(['$compileProvider', function($compileProvider) {
          if ($compileProvider.debugInfoEnabled) {
            $compileProvider.debugInfoEnabled(true);
          }
        }]);
  }).apply(null, arguments);, []]
06:51:27.558 INFO - Executing: [execute script: angular.resumeBootstrap(arguments[0]);, [[protractorBaseModule_]]])
06:51:27.606 INFO - Done: [execute script: angular.resumeBootstrap(arguments[0]);, [[protractorBaseModule_]]]
06:51:32.746 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:32.760 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:32.778 INFO - Executing: [find elements: By.id: btnCreateNewRule])
06:51:32.807 INFO - Done: [find elements: By.id: btnCreateNewRule]
06:51:32.841 INFO - Executing: [click: 39 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: btnCreateNewRule]])
06:51:32.910 INFO - Done: [click: 39 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: btnCreateNewRule]]
06:51:32.994 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:33.023 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:33.042 INFO - Executing: [find elements: By.id: txtRuleName])
06:51:33.072 INFO - Done: [find elements: By.id: txtRuleName]
06:51:33.120 INFO - Executing: [send keys: 40 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: txtRuleName], [New rule - Su
n Feb 08 2015]])
06:51:33.281 INFO - Done: [send keys: 40 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: txtRuleName], [New rule - Sun Feb
 08 2015]]
06:51:33.354 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:33.362 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:33.377 INFO - Executing: [find elements: By.id: txtRuleDescrption])
06:51:33.406 INFO - Done: [find elements: By.id: txtRuleDescrption]
06:51:33.435 INFO - Executing: [send keys: 41 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: txtRuleDescrption], [New Rul
e Description]])
06:51:33.574 INFO - Done: [send keys: 41 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: txtRuleDescrption], [New Rule Des
cription]]
06:51:33.650 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:33.658 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:33.674 INFO - Executing: [find elements: By.id: selectExamCode])
06:51:33.703 INFO - Done: [find elements: By.id: selectExamCode]
06:51:33.731 INFO - Executing: [find child elements: 42 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectExamCode], B
y.tagName: option])
06:51:33.763 INFO - Done: [find child elements: 42 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectExamCode], By.tag
Name: option]
06:51:33.794 INFO - Executing: [click: 43 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectExamCode]] -> tag name:
option]])
06:51:33.850 INFO - Done: [click: 43 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectExamCode]] -> tag name: optio
n]]
06:51:33.947 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:33.958 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:33.986 INFO - Executing: [find elements: By.id: selectExamCode])
06:51:34.015 INFO - Done: [find elements: By.id: selectExamCode]
06:51:34.044 INFO - Executing: [find child elements: 42 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectExamCode], B
y.selector: option[value='S3']])
06:51:34.073 INFO - Done: [find child elements: 42 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectExamCode], By.sel
ector: option[value='S3']]
06:51:34.105 INFO - Executing: [click: 46 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectExamCode]] -> tag name:
option]])
06:51:34.162 INFO - Done: [click: 46 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectExamCode]] -> tag name: optio
n]]
06:51:34.275 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:34.287 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:34.316 INFO - Executing: [find elements: By.id: selectStatus])
06:51:34.345 INFO - Done: [find elements: By.id: selectStatus]
06:51:34.371 INFO - Executing: [find child elements: 50 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectStatus], By.
tagName: option])
06:51:34.401 INFO - Done: [find child elements: 50 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectStatus], By.tagNa
me: option]
06:51:34.440 INFO - Executing: [click: 51 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectStatus]] -> tag name: op
tion]])
06:51:34.498 INFO - Done: [click: 51 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectStatus]] -> tag name: option]
]
06:51:34.590 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:34.604 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:34.623 INFO - Executing: [find elements: By.id: selectStatus])
06:51:34.653 INFO - Done: [find elements: By.id: selectStatus]
06:51:34.684 INFO - Executing: [find child elements: 50 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectStatus], By.
selector: option[value='COMPLETE']])
06:51:34.713 INFO - Done: [find child elements: 50 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectStatus], By.selec
tor: option[value='COMPLETE']]
06:51:34.749 INFO - Executing: [click: 53 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectStatus]] -> tag name: op
tion]])
06:51:34.808 INFO - Done: [click: 53 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectStatus]] -> tag name: option]
]
06:51:34.901 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:34.914 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:34.937 INFO - Executing: [find elements: By.id: selectGrade])
06:51:34.967 INFO - Done: [find elements: By.id: selectGrade]
06:51:34.997 INFO - Executing: [find child elements: 58 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectGrade], By.t
agName: option])
06:51:35.027 INFO - Done: [find child elements: 58 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectGrade], By.tagNam
e: option]
06:51:35.059 INFO - Executing: [click: 59 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectGrade]] -> tag name: opt
ion]])
06:51:35.120 INFO - Done: [click: 59 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectGrade]] -> tag name: option]]

06:51:35.214 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:35.226 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:35.244 INFO - Executing: [find elements: By.id: selectGrade])
06:51:35.259 INFO - Done: [find elements: By.id: selectGrade]
06:51:35.294 INFO - Executing: [find child elements: 58 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectGrade], By.s
elector: option[value='FAIL']])
06:51:35.324 INFO - Done: [find child elements: 58 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectGrade], By.select
or: option[value='FAIL']]
06:51:35.355 INFO - Executing: [click: 62 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectGrade]] -> tag name: opt
ion]])
06:51:35.418 INFO - Done: [click: 62 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectGrade]] -> tag name: option]]

06:51:35.512 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:35.524 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:35.543 INFO - Executing: [find elements: By.id: selectOperator])
06:51:35.572 INFO - Done: [find elements: By.id: selectOperator]
06:51:35.619 INFO - Executing: [find child elements: 63 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectOperator], B
y.tagName: option])
06:51:35.651 INFO - Done: [find child elements: 63 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectOperator], By.tag
Name: option]
06:51:35.684 INFO - Executing: [click: 64 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectOperator]] -> tag name:
option]])
06:51:35.743 INFO - Done: [click: 64 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectOperator]] -> tag name: optio
n]]
06:51:35.853 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:35.865 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:35.894 INFO - Executing: [find elements: By.id: selectOperator])
06:51:35.924 INFO - Done: [find elements: By.id: selectOperator]
06:51:35.951 INFO - Executing: [find child elements: 63 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectOperator], B
y.selector: option[value='AND']])
06:51:35.980 INFO - Done: [find child elements: 63 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectOperator], By.sel
ector: option[value='AND']]
06:51:36.013 INFO - Executing: [click: 64 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectOperator]] -> tag name:
option]])
06:51:36.072 INFO - Done: [click: 64 [[[[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: selectOperator]] -> tag name: optio
n]]
06:51:36.182 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:36.195 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:36.213 INFO - Executing: [find elements: By.id: btnRuleSubmit])
06:51:36.242 INFO - Done: [find elements: By.id: btnRuleSubmit]
06:51:36.279 INFO - Executing: [click: 66 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: btnRuleSubmit]])
06:51:36.353 INFO - Done: [click: 66 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: btnRuleSubmit]]
06:51:38.466 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:38.496 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:38.514 INFO - Executing: [find elements: By.selector: .RuleTable tr td a])
06:51:38.533 INFO - Done: [find elements: By.selector: .RuleTable tr td a]
06:51:38.601 INFO - Executing: [get text: 67 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:38.637 INFO - Done: [get text: 67 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:38.666 INFO - Executing: [get text: 68 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:38.700 INFO - Done: [get text: 68 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:38.727 INFO - Executing: [get text: 69 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:38.762 INFO - Done: [get text: 69 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:38.791 INFO - Executing: [get text: 70 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:38.826 INFO - Done: [get text: 70 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:38.852 INFO - Executing: [get text: 71 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:38.887 INFO - Done: [get text: 71 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:38.915 INFO - Executing: [get text: 72 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:38.950 INFO - Done: [get text: 72 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:38.978 INFO - Executing: [get text: 73 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:39.013 INFO - Done: [get text: 73 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:39.040 INFO - Executing: [get text: 74 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:39.075 INFO - Done: [get text: 74 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:39.102 INFO - Executing: [get text: 75 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:39.136 INFO - Done: [get text: 75 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:39.165 INFO - Executing: [get text: 76 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:39.200 INFO - Done: [get text: 76 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:39.228 INFO - Executing: [get text: 77 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:39.263 INFO - Done: [get text: 77 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:39.290 INFO - Executing: [get text: 78 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]
])
06:51:39.325 INFO - Done: [get text: 78 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> css selector: .RuleTable tr td a]]
06:51:39.500 INFO - Executing: [get: data:text/html,<html></html>])
06:51:39.535 INFO - Done: [get: data:text/html,<html></html>]
06:51:39.551 INFO - Executing: [execute script: window.name = "NG_DEFER_BOOTSTRAP!" + window.name;window.location.replace("http://pacific/angularspa/e
xruleseditor/");, []])
06:51:39.614 INFO - Done: [execute script: window.name = "NG_DEFER_BOOTSTRAP!" + window.name;window.location.replace("http://pacific/angularspa/exrule
seditor/");, []]
06:51:39.636 INFO - Executing: [execute script: return window.location.href;, []])
06:51:39.647 INFO - Done: [execute script: return window.location.href;, []]
06:51:39.698 INFO - Executing: [execute async script: try { return (function (attempts, asyncCallback) {
  var callback = function(args) {
    setTimeout(function() {
      asyncCallback(args);
    }, 0);
  };
  var check = function(n) {
    try {
      if (window.angular && window.angular.resumeBootstrap) {
        callback([true, null]);
      } else if (n < 1) {
        if (window.angular) {
          callback([false, 'angular never provided resumeBootstrap']);
        } else {
          callback([false, 'retries looking for angular exceeded']);
        }
      } else {
        window.setTimeout(function() {check(n - 1);}, 1000);
      }
    } catch (e) {
      callback([false, e]);
    }
  };
  check(attempts);
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [10]])
06:51:39.813 INFO - Done: [execute async script: try { return (function (attempts, asyncCallback) {
  var callback = function(args) {
    setTimeout(function() {
      asyncCallback(args);
    }, 0);
  };
  var check = function(n) {
    try {
      if (window.angular && window.angular.resumeBootstrap) {
        callback([true, null]);
      } else if (n < 1) {
        if (window.angular) {
          callback([false, 'angular never provided resumeBootstrap']);
        } else {
          callback([false, 'retries looking for angular exceeded']);
        }
      } else {
        window.setTimeout(function() {check(n - 1);}, 1000);
      }
    } catch (e) {
      callback([false, e]);
    }
  };
  check(attempts);
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [10]]
06:51:39.830 INFO - Executing: [execute script: return (function () {
    angular.module('protractorBaseModule_', []).
        config(['$compileProvider', function($compileProvider) {
          if ($compileProvider.debugInfoEnabled) {
            $compileProvider.debugInfoEnabled(true);
          }
        }]);
  }).apply(null, arguments);, []])
06:51:39.837 INFO - Done: [execute script: return (function () {
    angular.module('protractorBaseModule_', []).
        config(['$compileProvider', function($compileProvider) {
          if ($compileProvider.debugInfoEnabled) {
            $compileProvider.debugInfoEnabled(true);
          }
        }]);
  }).apply(null, arguments);, []]
06:51:39.855 INFO - Executing: [execute script: angular.resumeBootstrap(arguments[0]);, [[protractorBaseModule_]]])
06:51:39.893 INFO - Done: [execute script: angular.resumeBootstrap(arguments[0]);, [[protractorBaseModule_]]]
06:51:44.995 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:45.008 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:45.026 INFO - Executing: [find elements: By.id: chkboxRuleDelete_8])
06:51:45.055 INFO - Done: [find elements: By.id: chkboxRuleDelete_8]
06:51:45.119 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:45.131 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:45.159 INFO - Executing: [find elements: By.id: chkboxRuleDelete_5])
06:51:45.188 INFO - Done: [find elements: By.id: chkboxRuleDelete_5]
06:51:45.245 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:45.256 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:45.284 INFO - Executing: [find elements: By.id: btnDeleteRules])
06:51:45.314 INFO - Done: [find elements: By.id: btnDeleteRules]
06:51:45.340 INFO - Executing: [click: 79 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: btnDeleteRules]])
06:51:45.412 INFO - Done: [click: 79 [[ChromeDriver: chrome on WIN8_1 (844ec850ab8d87c049d12dec14ce26bf)] -> id: btnDeleteRules]]
06:51:47.532 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:47.545 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:47.562 INFO - Executing: [find elements: By.id: chkboxRuleDelete_8])
06:51:47.590 INFO - Done: [find elements: By.id: chkboxRuleDelete_8]
06:51:47.651 INFO - Executing: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]])
06:51:47.662 INFO - Done: [execute async script: try { return (function (rootSelector, callback) {
  var el = document.querySelector(rootSelector);

  try {
    if (!window.angular) {
      throw new Error('angular could not be found on the window');
    }
    if (angular.getTestability) {
      angular.getTestability(el).whenStable(callback);
    } else {
      if (!angular.element(el).injector()) {
        throw new Error('root element (' + rootSelector + ') has no injector.' +
           ' this may mean it is not inside ng-app.');
      }
      angular.element(el).injector().get('$browser').
          notifyWhenNoOutstandingRequests(callback);
    }
  } catch (err) {
    callback(err.message);
  }
}).apply(this, arguments); }
catch(e) { throw (e instanceof Error) ? e : new Error(e); }, [#exRulesEditorApp]]
06:51:47.690 INFO - Executing: [find elements: By.id: chkboxRuleDelete_5])
06:51:47.704 INFO - Done: [find elements: By.id: chkboxRuleDelete_5]
06:51:47.809 INFO - Executing: [delete session: 19d630db-feac-4b05-b831-6d9caa5993c6])
06:51:49.036 INFO - Done: [delete session: 19d630db-feac-4b05-b831-6d9caa5993c6]
